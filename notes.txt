1. Single Tier Applications
- A single-tier application is an application where the user interface, backend business logic & the database all reside in the same machine.
- The main upside of single-tier applications is they have no network latency since every component is located on the same machine. This adds up to the performance of the software.

2. Two Tier Application 
- A Two-tier application involves a client and a server. The client would contain the user interface & the business logic in one machine. And the backend server would be the database running on a different machine. The database server is hosted by the business & has control over it.

3. Three Tier applications
- In a three-tier application, the user interface, application logic & the database all lie on different machines & thus have different tiers. They are physically separated.

4. N Tier Applications
- An N-tier application is an application which has more than three components involved. For example 
  - Cache
  - Message queues for asynchronous behaviour
  - Load balancers
  - Search servers for searching through massive amounts of data
  - Components involved in processing massive amounts of data
  - Components running heterogeneous tech commonly known as web services etc.
- Note: There is another name for n-tier apps, the “distributed applications”. But, I think it’s not safe to use the word “distributed” yet, as the term distributed brings along a lot of complex stuff with it. It would rather confuse us than help. Though I will discuss the distributed architecture in this course, for now, we will just stick with the term N-tier applications.
- Why the need for so many tiers? 
- Two software design principles that are key to explaining this are the Single Responsibility Principle & the Separation of Concerns.
- Single Responsibility Principle simply means giving one, just one responsibility to a component & letting it execute it with perfection. Be it saving data, running the application logic or ensuring the delivery of the messages throughout the system.
- Separation of concerns kind of means the same thing, be concerned about your work only & stop worrying about the rest of the stuff. Keeping the components separate makes them reusable. Different services can use the same database, the messaging server or any component as long as they are not tightly coupled with each other.
- Note: Don’t confuse tiers with the layers of the application. Some prefer to use them interchangeably. But in the industry layers of an application typically means the user interface layer, business layer, service layer, or the data access layer.

5. What Is Web Architecture?
- Web architecture involves multiple components like database, message queue, cache, user interface & all running in conjunction with each other to form an online service.

6. Client Server Architecture
- The architecture works on a request-response model. The client sends the request to the server for information & the server responds with it.
- A very small percent of the business websites and applications use the peer to peer architecture, which is different from the client-server.
- Every website you browse, be it a Wordpress blog or a web application like Facebook, Twitter or your banking app is built on the client-server architecture.

7. Client
- The client holds our user interface. The user interface is the presentation part of the application. It’s written in Html, JavaScript, CSS and is responsible for the look & feel of the application.
- The user interface runs on the client. The client can be a mobile app, a desktop or a tablet like an iPad. It can also be a web-based console, running commands to interact with the backend server.

8. Types of Client
- Thin Client & Thick Client
- Thin Client is the client which holds just the user interface of the application. It has no business logic of any sort. For every action, the client sends a request to the backend server. Just like in a three-tier application.
- On the contrary, the thick client holds all or some part of the business logic. These are the two-tier applications. We’ve already gone through this if you remember.

